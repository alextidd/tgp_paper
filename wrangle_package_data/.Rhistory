purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))
# generate set summaries
sets <- variants %>%
dplyr::summarise(chr = unique(chr),
start = min(stop),
end = max(stop),
Disease = trait,
nSNP = dplyr::n_distinct(variant)) %>%
dplyr::ungroup() %>%
dplyr::inner_join(best, by = "CredibleSet") %>%
dplyr::select(chr, start, end, everything()) %>%
dplyr::left_join(best)
variants
variants <- read_tibble(
paste0(inDir, trait, ".VariantList.tsv"),
header = T
) %>%
dplyr::mutate(CredibleSet = as.character(CredibleSet)) %>%
dplyr::group_by(CredibleSet)
# get best SNPs
if(trait == "PrCa"){
best <- variants %>%
# best SNP
dplyr::filter(PosteriorProb == max(PosteriorProb)) %>%
# if more than one bestSNP per CS, just randomly sample one (this only affects the distance predictions, not the ABC predictions)
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::transmute(BestSNPPos = end,
BestSNP = variant,
CredibleSet)
}
if(trait == "BC"){
best <- read_tibble(paste0(inDir, trait, ".best_SNP_per_CS.tsv"), header = T)
}
# add BestSNP, Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE))) %>%
# add BestSNP
dplyr::left_join(best)
# read variants
variants <- read_tibble(
paste0(inDir, trait, ".VariantList.tsv"),
header = T
) %>%
dplyr::mutate(CredibleSet = as.character(CredibleSet))
# get best SNPs
if(trait == "PrCa"){
best <- variants %>%
dplyr::group_by(CredibleSet) %>%
# best SNP
dplyr::filter(PosteriorProb == max(PosteriorProb)) %>%
# if more than one bestSNP per CS, just randomly sample one (this only affects the distance predictions, not the ABC predictions)
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::transmute(BestSNPPos = end,
BestSNP = variant,
CredibleSet)
}
if(trait == "BC"){
best <- read_tibble(paste0(inDir, trait, ".best_SNP_per_CS.tsv"), header = T)
}
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE))) %>%
# add BestSNP
dplyr::left_join(best) %>%
# generate set summaries
dplyr::group_by(CredibleSet)
trait
trait
# read variants
variants <- read_tibble(
paste0(inDir, trait, ".VariantList.tsv"),
header = T
) %>%
dplyr::mutate(CredibleSet = as.character(CredibleSet))
# get best SNPs
if(trait == "PrCa"){
best <- variants %>%
dplyr::group_by(CredibleSet) %>%
# best SNP
dplyr::filter(PosteriorProb == max(PosteriorProb)) %>%
# if more than one bestSNP per CS, just randomly sample one (this only affects the distance predictions, not the ABC predictions)
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::transmute(BestSNPPos = end,
BestSNP = variant,
CredibleSet)
}
if(trait == "BC"){
best <- read_tibble(paste0(inDir, trait, ".best_SNP_per_CS.tsv"), header = T)
}
sets <-
# add Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE))) %>%
# add BestSNP
dplyr::left_join(best) %>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chrom = unique(chrom),
start = min(start),
end = max(end),
Disease = trait,
nSNP = dplyr::n_distinct(variant)) %>%
# generate set summaries
sets <- variants %>%
dplyr::ungroup() %>%
dplyr::inner_join(best, by = "CredibleSet") %>%
dplyr::select(chr, start, end, everything())
sets <-
# add Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE))) %>%
# add BestSNP
dplyr::left_join(best) %>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chrom = unique(chrom),
start = min(start),
end = max(end),
Disease = trait,
nSNP = dplyr::n_distinct(variant))
sets
variants
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE))) %>%
# add BestSNP
dplyr::left_join(best) %>%
# generate set summaries
dplyr::group_by(CredibleSet)
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))%>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
CredibleSet = CredibleSet,
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding),
AnyPromoter = any(Promoter),
AnySpliceSite = any(SpliceSite),
Disease = trait)  %>%
# add BestSNP
dplyr::left_join(best)
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))%>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding),
AnyPromoter = any(Promoter),
AnySpliceSite = any(SpliceSite),
Disease = trait)  %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best)
?any
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))%>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding == T),
AnyPromoter = any(Promoter == T),
AnySpliceSite = any(SpliceSite == T),
Disease = trait)  %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best)
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))%>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding == T),
AnyPromoter = any(Promoter == T),
AnySpliceSite = any(SpliceSite == T),
Disease = trait)  %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best) %>% dplyr::filter(Coding)
sets <-
# add Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))%>%
# generate set summaries
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding),
AnyPromoter = any(Promoter),
AnySpliceSite = any(SpliceSite),
Disease = trait)  %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best)
sets
variants_annotationd <-
# add Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))
variants_annotationd
variants_annotated <-
# add Coding, SpliceSite, Promoter
list(
promoters %>% dplyr::transmute(chrom, start, end, Promoter = T),
splicesite %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
SpliceSite = T
),
dplyr::bind_rows(missense, nonsense) %>% dplyr::transmute(
chrom,
start = position - 1,
end = position,
Coding = T
)
) %>%
purrr::map(~ bed_intersect_left(variants, ., keepBcoords = F)) %>%
purrr::reduce(dplyr::full_join) %>%
dplyr::full_join(variants) %>%
dplyr::mutate(dplyr::across(c(Promoter, SpliceSite, Coding), ~ tidyr::replace_na(.x, FALSE)))
variants_annotated
variants_annotated %>% dplyr::filter(promoter)
variants_annotated %>% dplyr::filter(Promoter)
variants_annotated %>% dplyr::filter(Promoter) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
# generate set summaries
sets <- variants_annotated %>%
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding),
AnyPromoter = any(Promoter),
AnySpliceSite = any(SpliceSite),
Disease = trait)  %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best)
variants_annotated %>% dplyr::filter(Promoter) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
sets %>% dplyr::filter(AnyPromoter)
variants_annotated %>% dplyr::filter(splicesite) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
variants_annotated %>% dplyr::filter(SpliceSite) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
sets %>% dplyr::filter(AnySpliceSite)
variants_annotated %>% dplyr::filter(AnyCoding) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
variants_annotated %>% dplyr::filter(Coding) %>% dplyr::pull(CredibleSet) %>% dplyr::n_distinct()
sets %>% dplyr::filter(AnyCoding)
variants_annotated %>%
dplyr::group_by(CredibleSet) %>%
# summarise
dplyr::summarise(chr = unique(chrom),
start = min(start),
end = max(end),
nSNP = dplyr::n_distinct(variant),
AnyCoding = any(Coding),
AnyPromoter = any(Promoter),
AnySpliceSite = any(SpliceSite),
Disease = trait)  %>%
dplyr::ungroup() %>%
dplyr::select(chr, start, end, CredibleSet, everything()) %>%
# add BestSNP
dplyr::left_join(best)
variants
variants_annotated
q()
