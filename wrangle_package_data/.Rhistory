PreSTIGE="#9C914F")
colour_Method <- c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3",
ChIA-PET="#BE704E",
FANTOM5="#5E5360",
Hnisz="#FF713D",
IM-PET="#EE5244",
isHi-C="#7353BA",
PreSTIGE="#9C914F")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3",
ChIA-PET="#BE704E",
FANTOM5="#5E5360",
Hnisz="#FF713D",
IM-PET="#EE5244",
isHi-C="#7353BA",
PreSTIGE="#9C914F")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3",
ChIA-PET="#BE704E",
FANTOM5="#5E5360",
Hnisz="#FF713D",
IM-PET="#EE5244",
isHi-C="#7353BA",
PreSTIGE="#9C914F")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3",
ChIAPET="#BE704E",
FANTOM5="#5E5360",
Hnisz="#FF713D",
IM-PET="#EE5244",
isHi-C="#7353BA",
PreSTIGE="#9C914F")
c(ClosestGene="#4c8a76",
ClosestTSS="#76dbca",
ABC="#64113F",
ABC_Predictions_A.Engreitz_x_C.Engreitz="#DE4D86",
ABC_Predictions_A.Engreitz_x_C.Engreitz_repeat="#F29CA3",
ABC_Predictions_A.Engreitz_x_C.Trench="#F7CACD",
ABC_Predictions_A.Trench_x_C.Engreitz="#F0BDD5",
ABC_Predictions_A.Trench_x_C.Trench="#FF71E4",
EpiMAP="#F9C22E",
INQUISIT="#7AC74F",
INQUISIT.distallevel="#D5D887",
INQUISITIVe="#c9777f",
INQUISITIVe.distal="#ffc7ff",
INQUISITIVe.coding="#a55edb",
INQUISITIVe.promoter="#d968e3",
ChIAPET="#BE704E",
FANTOM5="#5E5360",
Hnisz="#FF713D",
IMPET="#EE5244",
isHiC="#7353BA",
PreSTIGE="#9C914F")
df <- bind_rows(GPs,.id = "Cells") %>%
select(Cells, TargetGene, CredibleSet,
starts_with("GeneScore."),
starts_with("GenePrediction")) %>%
pivot_longer(!c(Cells,TargetGene,CredibleSet),
names_to = c(".value","Method"),
names_pattern = "(GeneScore|GenePredictionMax|GenePrediction)\\.(.+)") %>%
left_join(model_Method)
for(gl in names(knownGenesList)){
df[gl] <- df$TargetGene %in% knownGenesList[[gl]]
}
df <- df %>%
gather(knownGenesList, knownGene, names(knownGenesList)) %>%
group_by(Cells,CredibleSet,Method,knownGenesList) %>%
mutate(nKnownGenes=sum(knownGene)) %>%
filter(nKnownGenes>0 & nKnownGenes==maxKnownGenes) %>%
group_by(Cells) %>%
mutate(label = gsub("_"," ",Method)%>%gsub("Predictions ","",.),
GeneScore = case_when(grepl("Closest",Method) & !GenePrediction ~ 0,
grepl("Closest",Method) & GenePrediction ~ 1,
TRUE ~ GeneScore)) %>%
filter(!(Cells=="AllCells" & Method %ni% c(allcells.predictions$Method,"ClosestGene","ClosestTSS")) &
!(Cells=="Breast" & Method %ni% c(breast.predictions$Method,"ClosestGene","ClosestTSS")) &
!(Cells=="MCF-7" & Method %ni% c(mcf7.predictions$Method,"ClosestGene","ClosestTSS")) &
!(Cells=="IBD-enriched" & Method %ni% c(ibd.enriched.predictions$Method,"ClosestGene","ClosestTSS")))
df$knownGenesList <- factor(df$knownGenesList,levels = order_knownGenesList)
df$Cells <- factor(df$Cells, levels = order_Cells)
getPRPlot_mine <- function(pr){
baselines <- pr %>% select(knownGenesList,knownGenesListLabel,Cells,precision_baseline) %>% unique
pr  %>%
filter(.threshold %ni% c(0,Inf,-Inf) & recall != 0) %>%
ggplot(aes(x = recall,
y = precision,
colour = Method,
shape = PredictorType)) +
geom_hline(data = baselines,
aes(yintercept = precision_baseline),
colour = "grey", linetype = "dashed") +
geom_path(data = .%>%filter(grepl("GeneScore",Predictor))) +
geom_point(data = .%>%filter(grepl("GenePrediction\\.",Predictor))) +
geom_point(data = .%>%filter(grepl("GenePredictionMax\\.",Predictor))) +
facet_grid(Cells ~ knownGenesListLabel) +
xlim(0,1) +
coord_equal() +
theme_bw() +
theme(axis.text.x = element_text(angle = 270, hjust = 0, vjust = 0.5),
panel.grid = element_blank()) +
labs(subtitle = paste0("variants = ",trait))
}
pr
?rbind
maxKnownGenes=100
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
dir("~/")
dir("/")
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction/"
setwd(wkdir)
wkdir<-"/working/lab_georgiat/alexandT/target_gene_prediction_paper//"
setwd(wkdir)
getwd()
read.delim("../data/Activity_Signal/metadata/sample_info.txt")
dir(enrichmentDir, pattern = "fisher", full.names = T)
PlotEnrichment <- function(df, x, y){
df %>%
mutate(Bin = factor(Bin, levels = bin_levels)) %>%
filter(StatusGroup=="ERPOS,ERNEG,BOTH") %>%
ggplot(aes(x = get(x),
y = -log10(get(y)),
colour = CellType,
alpha = Bin)) +
geom_point +
geom_text_repel(data = . %>%
group_by(Mark, Method) %>%
filter(get(x) == max(get(x)) | get(y) == min(get(y))),
aes(label = CellType)) +
facet_grid(Method ~ Mark) +
theme_bw()
}
?geom_text_repel
# variables #
trait <- "BC"
# functions #
FixCellTypeCode <- function(df){
df %>%
dplyr::rename(code = CellType) %>%
left_join(CellTypesTable %>% select(code, CellType = sample_info))
}
PlotEnrichment <- function(df, x, y){
bin_levels <- paste0("bin",1:10)
df %>%
FixCellTypeCode %>%
mutate(Bin = Bin %>% gsub("bin","",.) %>% as.numeric) %>%
{ if ("StatusGroup" %in% names(df)) filter(., StatusGroup == "ERPOS,ERNEG,BOTH") else . } %>%
{ if ("Binning" %in% names(df)) filter(., Binning == "deciles") else . } %>%
ggplot(aes(x = get(x),
y = -log10(get(y)),
shape = CellType,
colour = Bin)) +
geom_point() +
geom_text_repel(data = . %>%
mutate(Label = gsub("\\s", "\n", CellType)) %>%
group_by(Mark, Method) %>%
filter(get(x) == max(get(x)) | get(y) == min(get(y))),
aes(label = Label),
size = 3) +
facet_grid(Method ~ Mark) +
theme_bw() +
scale_colour_gradient(high = "red",
mid = "white",
low = "blue")
}
# modules #
library(stringr)
library(tidyverse)
library(ggrepel)
# input #
enrichmentDir <- paste0(wkdir, "output/", trait, "/Activity_Signal/")
CellTypesTable <- read.delim("data/Activity_Signal/metadata/sample_info.txt", stringsAsFactors = F) %>% tibble
getwd()
CellTypesTable <- read.delim("data/Activity_Signal/metadata/sample_info.txt", stringsAsFactors = F) %>% tibble
rm(list = ls())
q()
?gather
library(tidyr)
?gather()
wkdir="/working/lab_georgiat/alexandT/target_gene_prediction_paper/"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target_gene_prediction_paper/"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target_gene_prediction_paper/"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target_gene_prediction_paper/"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target_gene_prediction_paper/"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target.gene.prediction.package//"
setwd(wkdir)
library(devtools)
use_r("import_variants")
library(devtools)
getwd()
library(roxygen2)
library(knitr)
use_r("import_variants")
library(usethis)
check()
file.remove("R/fbind.R")
file.remove("R/fcount.R")
load_all()
library(devtools)
?use_r
?create_package
q()
?create_package
wkdir="/working/lab_georgiat/alexandT/target.gene.prediction.package//"
setwd()
setwd(wkdir)
q()
wkdir="/working/lab_georgiat/alexandT/target.gene.prediction.package//"
setwd(wkdir)
wkdir="/working/lab_georgiat/alexandT/target.gene.prediction.package//"
setwd(wkdir)
library(devtools)
load("load("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")")
"load("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")
load("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")
load("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")
readRDS("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")
mat <- readRDS("/working/lab_georgiat/jonathB/PROJECTS/trench_lab//target_gene_prediction/output/enhancer_activity_gene_target/expression_matrix/expression_qn_matrix_signal.rds")
q()
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("tgp")
install.packages("LDlinkR")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
do_all_cells = NULL
paste0("BC/", do_all_cells)
paste0(outDir,"/", trait, "/")
paste0("BC/", trait, "/", do_all_cells)
trait = "BC
"
trait
trait = "BC"
outDir = "out"
paste0(outDir,"/", trait, "/") %>%
{ if(do_all_cells) paste0(., "all_cells/") else paste0(., "enriched_cells/")}
library(tidyverse)
paste0(outDir,"/", trait, "/") %>%
{ if(do_all_cells) paste0(., "all_cells/") else paste0(., "enriched_cells/")}
do_all_cells = F
paste0(outDir,"/", trait, "/") %>%
{ if(do_all_cells) paste0(., "all_cells/") else paste0(., "enriched_cells/")}
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_georgiat/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
n.cs <- cs %>% filter(CredibleSet == cs.name) ; stopifnot(nrow(n.cs) == 1)
setwd("/working/lab_jonathb/alexandT/")
#' Predict target genes of fine-mapped variants for a trait
#'
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_georgiat/alexandT/target_gene_prediction/ABC-from-github/ABC-Max")
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
inDir <- "/working/lab_jonathb/alexandT/tgp_paper/output/Traits/BC/"
library(magrittr)
read.delim(
paste0(inDir, "BC.best_pval_per_cs.tsv"),
header = T
)
read.delim(
paste0(inDir, "BC.best_pval_per_cs.tsv"),
header = T
)%>%head
pvals <- read.delim(
paste0(inDir, "BC.VariantList_pvals.bed"),
header = F
) %>%
dplyr::select(
BestSNP = V4,
p = V9
)
best <- read.delim(
paste0(inDir, "BC.best_pval_per_cs.tsv"),
header = T
)
pvals
best
setwd("/working/lab_jonathb/alexandT/")
plot_PR
setwd("/working/lab_jonathb/alexandT/")
scores
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
q()
sessionInfo()
q()
setwd("/working/lab_jonathb/alexandT/")
sessionIn
sessionInfo()
setwd("/working/lab_jonathb/alexandT/")
list.files("~/")
list.files("~/output/")
list.files("~/output/H3K27ac/")
setwd("~")
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
func <- function(...){ls()}
func <- function(...){args<-ls(); return(args)}
func(a = 10, b = 11)
func <- function(a,b){args<-ls(); return(args)}
func(a = 10, b = 11)
ls()
func <- function(a,b){args<-environment(); return(args)}
func(a = 10, b = 11)
func <- function(a,b){args<-as.list(environment()); return(args)}
func(a = 10, b = 11)
func <- function(a,b){args<-as.list(environment()); dput(args)}
func(a = 10, b = 11)
?dput
lis<-structure(list(a = 10, b = 11), .Names = c("a", "b"))
lis
func(a = 10, b = 11)
dput(func(a = 10, b = 11), file = "args.txt")
?mget
func <- function(a,b){args<-mget(ls(),.ArgsEnv); dput(args)}
func(a = 10, b = 11)
environment()
func <- function(a,b){args<-mget(ls()); dput(args)}
func(a = 10, b = 11)
contact = NULL ; H3K27ac = NULL ; setwd("/working/lab_jonathb/alexandT/tgp") ; library(devtools) ; load_all() ; celltype_of_interest = NULL ; tissue_of_interest = NULL ; trait="BC" ; outDir = "out/" ; variantsFile="/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.VariantList.bed" ; driversFile = "/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.Drivers.txt" ; referenceDir = "/working/lab_jonathb/alexandT/tgp/reference_data/data/" ; variant_to_gene_max_distance = 2e6 ; min_proportion_of_variants_in_top_H3K27ac = 0.05 ; do_all_celltypes = F ; do_all_celltypes_in_enriched_tissue = T ; do_manual_weighting = F ; n_unique_manual_weights = NULL ; do_scoring = T ; do_performance = T ; do_XGBoost = T ; do_timestamp = F
as.list(environment)
contact = NULL ; H3K27ac = NULL ; setwd("/working/lab_jonathb/alexandT/tgp")
rm(list  = ls())
contact = NULL ; H3K27ac = NULL ; setwd("/working/lab_jonathb/alexandT/tgp")
as.list(environment)
as.list(environment())
setwd("/working/lab_jonathb/alexandT/tgp") ; contact = NULL ; H3K27ac = NULL ; celltype_of_interest = NULL ; tissue_of_interest = NULL ; trait="BC" ; outDir = "out/" ; variantsFile="/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.VariantList.bed" ; driversFile = "/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.Drivers.txt" ; referenceDir = "/working/lab_jonathb/alexandT/tgp/reference_data/data/" ; variant_to_gene_max_distance = 2e6 ; min_proportion_of_variants_in_top_H3K27ac = 0.05 ; do_all_celltypes = F ; do_all_celltypes_in_enriched_tissue = T ; do_manual_weighting = F ; n_unique_manual_weights = NULL ; do_scoring = T ; do_performance = T ; do_XGBoost = T ; do_timestamp = F  ; args <- as.list(environment()) ; library(devtools) ; load_all()
#
setwd("/working/lab_jonathb/alexandT/")
setwd("/working/lab_jonathb/alexandT/")
, by = c("chrom", "variant", "cs")
setwd("/working/lab_jonathb/alexandT/")
# run on hpcapp01 head node! ###########################################################
library(LDlinkR)
library(tidyverse)
library(liftOver)
wkdir <- "/working/lab_jonathb/alexandT/tgp_paper/wrangle_package_data/" ; setwd(wkdir)
outDir <- paste0(wkdir, "output/Traits/PrCa_GWAS_catalog/")
assoc_SNPs <- read.csv(
file = "data/Traits/PrCa/GWAS_catalog/efotraits_EFO_0001663-associations-2022-03-4.csv",
quote = "\"") %>% as_tibble %>%
filter(Location != "Mapping not available") %>%
separate_rows(Variant.and.risk.allele, sep = ", ") %>%
mutate(variant = Variant.and.risk.allele %>% gsub("\\-.*", "", .),
p =  as.numeric(gsub(" x 10", "e", P.value))) %>%
distinct(variant, p)
index_SNPs <- assoc_SNPs %>%
filter(p < 5e-8) %>%
group_by(variant) %>%
filter(p == min(p)) %>%
distinct
write.table(index_SNPs %>% select(variant),
paste0(outDir, "index_SNPs.txt"),
col.names = F, row.names = F, quote = F, sep = "\t")
index_SNPs
index_SNPs %>% select(variant)
write.table(index_SNPs %>% dplyr::select(variant),
paste0(outDir, "index_SNPs.txt"),
col.names = F, row.names = F, quote = F, sep = "\t")
q()
