contact = NULL ; H3K27ac = NULL ; setwd("/working/lab_jonathb/alexandT/tgp")
rm(list  = ls())
contact = NULL ; H3K27ac = NULL ; setwd("/working/lab_jonathb/alexandT/tgp")
as.list(environment)
as.list(environment())
setwd("/working/lab_jonathb/alexandT/tgp") ; contact = NULL ; H3K27ac = NULL ; celltype_of_interest = NULL ; tissue_of_interest = NULL ; trait="BC" ; outDir = "out/" ; variantsFile="/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.VariantList.bed" ; driversFile = "/working/lab_jonathb/alexandT/tgp/example_data/data/BC/BC.Drivers.txt" ; referenceDir = "/working/lab_jonathb/alexandT/tgp/reference_data/data/" ; variant_to_gene_max_distance = 2e6 ; min_proportion_of_variants_in_top_H3K27ac = 0.05 ; do_all_celltypes = F ; do_all_celltypes_in_enriched_tissue = T ; do_manual_weighting = F ; n_unique_manual_weights = NULL ; do_scoring = T ; do_performance = T ; do_XGBoost = T ; do_timestamp = F  ; args <- as.list(environment()) ; library(devtools) ; load_all()
#
setwd("/working/lab_jonathb/alexandT/")
trait = "BC" #
celltypes = "enriched_tissues" #
baseDir <- "/working/lab_jonathb/alexandT/tgp_paper/"
wkdir <- "/working/lab_jonathb/alexandT/tgp_paper/compare_methods/" ; setwd(wkdir)
variant_to_gene_max_distance = 2e6
max_n_drivers_per_cs = Inf
devtools::load_all("/working/lab_jonathb/alexandT/tgp/")
library(tidyverse)
cat(trait, celltypes, "#############\n")
outDir <- paste("output", trait, celltypes, "", sep = "/")
# get trait drivers / variants ====
driversFile <- paste0(baseDir, "wrangle_package_data/output/Traits/", trait, "/", trait, ".Drivers.txt")
drivers <- read_tibble(driversFile)$V1 %>%
check_driver_symbols(driversFile)
variantsFile <- paste0(baseDir, "wrangle_package_data/output/Traits/", trait, "/", trait, ".VariantList.bed")
variants <- import_BED(variantsFile,
metadata_cols = c("variant", "cs"))
# txv masterlist ====
txv_master <- variants %>%
# expand variant coords to search range
valr::bed_slop(both = variant_to_gene_max_distance,
genome = ChrSizes,
trim = T) %>%
# get all protein-coding TSSs within search range of each variant
bed_intersect_left(., TSSs %>% dplyr::filter(ensg %in% pcENSGs),
suffix = c(".variant", ".TSS")) %>%
# restore variant coords
dplyr::select(-c(start, end)) %>%
dplyr::left_join(variants, by = c("chrom", "variant", "cs")) %>%
# add distance
dplyr::mutate(distance = abs(end.TSS - end))
# gxc masterlist ====
gxc_master <- txv_master %>%
# convert to cs-x-gene level
dplyr::distinct(cs, symbol)
# generate distance-based predictions ====
distance_predictions <- txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min")) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol) %>%
dplyr::summarise(dplyr::across(dplyr::starts_with("inv"), max))
# get method predictions ====
method_predictions <- read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
# gather all predictions ===
predictions <- gxc_master %>%
dplyr::left_join(method_predictions) %>%
dplyr::left_join(distance_predictions)
predictions[is.na(predictions)] <- 0
# performance ====
performance <- predictions %>%
get_PR(txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (",
PR_AUC %>% max %>% round(2),
")"))
)
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
max_n_drivers_per_cs
predictions
# performance ====
performance <- predictions %>%
get_PR(txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (",
PR_AUC %>% max %>% round(2),
")"))
)
get_PR
max_n_drivers_per_CS
max_n_drivers_per_cs
max_n_drivers_per_CS = Inf
# performance ====
performance <- predictions %>%
get_PR(.,
txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (",
PR_AUC %>% max %>% round(2),
")"))
)
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
gridExtra::grid.arrange(
AUPRC + ggplot2::theme(legend.position = "none"),
PR,
ncol = 2)
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
# performance ====
performance <- predictions %>%
get_PR(.,
txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS)
performance$PR <- performance$PR %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (", PR_AUC %>% max %>% round(2), ")"))
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
performance
# performance ====
performance <- predictions %>%
get_PR(.,
txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (", PR_AUC %>% max %>% round(2), ")"))
)
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
pdf(paste0(outDir, "performance.pdf"), onefile = T, width = 20)
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
dev.off()
pdf(paste0(outDir, "performance.pdf"), onefile = T, width = 10)
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
dev.off()
# save plots
{
pdf(paste0(outDir, "performance.pdf"), onefile = T, width = 15)
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC,
ncol = 2)
dev.off()
}
# save plots
{
pdf(paste0(outDir, "performance.pdf"), onefile = T, width = 15)
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC + ggplot2::theme(legend.position = "none"),
ncol = 2)
dev.off()
}
performance
performance
get_PR
# generate distance-based predictions ====
distance_predictions <- txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min"))
read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# # get max score per gxc per method
# dplyr::group_by(cs, symbol, method) %>%
# dplyr::filter(score == max(score)) %>%
# dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
# get method predictions ====
method_predictions <- read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
widen
# get method predictions ====
method_predictions <- read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
# gather all predictions ===
predictions <- gxc_master %>%
dplyr::left_join(method_predictions) %>%
dplyr::left_join(distance_predictions)
predictions[is.na(predictions)] <- 0
# performance ====
performance <- predictions %>%
get_PR(.,
txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (", PR_AUC %>% max %>% round(2), ")"))
)
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax n drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC + ggplot2::theme(legend.position = "none"),
ncol = 2)
predictions
txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min"))
txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min")) %>%
dplyr::distinct(cs, symbol, dplyr::starts_with("inv"))
# generate distance-based predictions ====
distance_predictions <- txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min")) %>%
dplyr::select(cs, symbol, dplyr::starts_with("inv"))
# generate distance-based predictions ====
distance_predictions <- txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min")) %>%
dplyr::select(variant, cs, symbol, dplyr::starts_with("inv"))
# get method predictions ====
method_predictions <- read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
# gather all predictions ===
predictions <- gxc_master %>%
dplyr::left_join(method_predictions) %>%
dplyr::left_join(distance_predictions)
predictions[is.na(predictions)] <- 0
# performance ====
performance <- predictions %>%
get_PR(.,
txv_master,
drivers,
pcENSGs,
max_n_drivers_per_CS) %>%
purrr::map(
~ .x %>%
dplyr::group_by(prediction_method) %>%
dplyr::mutate(prediction_method = prediction_method %>%
paste0(" (", PR_AUC %>% max %>% round(2), ")"))
)
# plot performance ===
plot_subtitle <- paste0(
"\nTrait = ", trait,
", Celltypes = " , celltypes,
"\nmax n drivers per CS = ", max_n_drivers_per_cs,
", max distance = ", variant_to_gene_max_distance)
PR <- performance %>%
plot_PR +
ggplot2::ggtitle(paste("Precision-Recall\n", plot_subtitle)) +
ggrepel::geom_text_repel(
data = . %>% dplyr::filter(prediction_type == "max"))
AUPRC <- performance %>%
plot_AUPRC +
ggplot2::ggtitle(paste("Area under Precision-Recall curve\n", plot_subtitle))
gridExtra::grid.arrange(
PR + ggplot2::theme(legend.position = "none"),
AUPRC + ggplot2::theme(legend.position = "none"),
ncol = 2)
considered <- read.delim("considered_CSs.txt")
considered <- read.delim("considered_CSs.txt")$V1
considered
read.delim("considered_CSs.txt")
read.delim("considered_CSs.txt") %>% head
read.delim("considered_CSs.txt", header =F)$V1
read.delim("considered_CSs.txt", header =F)$V1->considered
trait = "IBD"
celltypes = "enriched_tissues" #
baseDir <- "/working/lab_jonathb/alexandT/tgp_paper/"
wkdir <- "/working/lab_jonathb/alexandT/tgp_paper/compare_methods/" ; setwd(wkdir)
variant_to_gene_max_distance = 2e6
max_n_drivers_per_CS = Inf
devtools::load_all("/working/lab_jonathb/alexandT/tgp/")
cat(trait, celltypes, "#############\n")
outDir <- paste("output", trait, celltypes, "", sep = "/")
# get trait drivers / variants ====
driversFile <- paste0(baseDir, "wrangle_package_data/output/Traits/", trait, "/", trait, ".Drivers.txt")
drivers <- read_tibble(driversFile)$V1 %>%
check_driver_symbols(driversFile)
variantsFile <- paste0(baseDir, "wrangle_package_data/output/Traits/", trait, "/", trait, ".VariantList.bed")
variants <- import_BED(variantsFile,
metadata_cols = c("variant", "cs"))
# txv masterlist ====
txv_master <- variants %>%
# expand variant coords to search range
valr::bed_slop(both = variant_to_gene_max_distance,
genome = ChrSizes,
trim = T) %>%
# get all protein-coding TSSs within search range of each variant
bed_intersect_left(., TSSs %>% dplyr::filter(ensg %in% pcENSGs),
suffix = c(".variant", ".TSS")) %>%
# restore variant coords
dplyr::select(-c(start, end)) %>%
dplyr::left_join(variants, by = c("chrom", "variant", "cs")) %>%
# add distance
dplyr::mutate(distance = abs(end.TSS - end))
# gxc masterlist ====
gxc_master <- txv_master %>%
# convert to cs-x-gene level
dplyr::distinct(cs, symbol)
# generate distance-based predictions ====
distance_predictions <- txv_master %>%
dplyr::group_by(variant) %>%
# Calculate inverse of the absolute bp distance for each variant-transcript pair
dplyr::mutate(invDistanceToTSS = 1/distance,
# ranking transcript TSSs (if two transcript TSSs are equidistant to the variant, they will receive the same, lower rank)
invDistanceToTSSRank = 1/rank(distance, ties.method = "min")) %>%
dplyr::select(variant, cs, symbol, dplyr::starts_with("inv"))
# get method predictions ====
method_predictions <- read_tibble(
gzfile(paste("output", trait, celltypes, "predictions_long.tsv.gz", sep = "/")),
header = T
) %>%
# get max score per gxc per method
dplyr::group_by(cs, symbol, method) %>%
dplyr::filter(score == max(score)) %>%
dplyr::distinct() %>%
# widen
tidyr::pivot_wider(id_cols = c(cs, symbol),
names_from = method,
values_from = score)
# gather all predictions ===
predictions <- gxc_master %>%
dplyr::left_join(method_predictions) %>%
dplyr::left_join(distance_predictions)
predictions[is.na(predictions)] <- 0
# performance ====
get_PR
testable <- txv_master %>%
# only test protein-coding target predictions against drivers (assumes all drivers are protein-coding)
dplyr::filter(ensg %in% pcENSGs) %>%
# add drivers
dplyr::mutate(driver = symbol %in% drivers$symbol) %>%
# only test predictions in CSs with a driver within max prediction distance for performance evaluation
get_testable(max_n_drivers_per_CS) %>%
dplyr::distinct(cs, symbol, driver)
testable
testable %>% dplyr::filter(cs %in% considered)
considered
testable %>% dplyr::filter(cs %in% considered) %>% dplyr::distinct(cs)
max_n_drivers_per_CS = Inf
max_n_drivers_per_CS = 1
testable <- txv_master %>%
# only test protein-coding target predictions against drivers (assumes all drivers are protein-coding)
dplyr::filter(ensg %in% pcENSGs) %>%
# add drivers
dplyr::mutate(driver = symbol %in% drivers$symbol) %>%
# only test predictions in CSs with a driver within max prediction distance for performance evaluation
get_testable(max_n_drivers_per_CS) %>%
dplyr::distinct(cs, symbol, driver)
testable %>% dplyr::filter(cs %in% considered) %>% dplyr::distinct(cs)
q()
